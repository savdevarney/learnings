Components
NgModule file
Creating components
Data binding & string interpolation to insert dynamic values into HTML
Types & interfaces

COMPONENTS

What is a componenet? 

	- The bulk of an angular app
	- pieces of UI (nav bar, headers, input boxes)
	- include a class which can have properties and methods
	- include tempaltes (what user sees)
	- bind from class --> template and class <-- template


Example layout: 

	- Root App Component (all other nested inside)
	- Pass ata in and out
	- Reactive

App Component
	Navbar component
	Posts component
		post search
		post component
	sidebar component

Benefits: 

	- organize code
	- break up the UI so we can encapsulate funtionality
	- promotes reusability
	- better teamwork


Exampinging a simple componenet (root app)

import { Componenet } from '@angular/core';

@Component({
	selector: 'my-app',
	remplate: `<h1>Hello {{name}}</h1>`,
})

export class AppComponent {
	name = 'Angular';
}

<body>
	<my-app>Loading AppComponenet content here ... </my-app>
</body>


1. import from angular/core ... bringing in corecomponent class from angular core library in angular
2. Use the componenet decorator to add meta-data to component 
		- selector: directive to insert into HTML
		- template using backticks (to put on myltiple lines)
				- can also use temlate URL to point to a separate file
		- double currly is string interpoloation for dynamic data
3. class of AppComponeent with name value of 'Angular'

APPLICATION LIFECYCLE

- Angular creates, updates and destroys components as the user moves through the application.  Your app can take action at each moment in this lifecycle through optional lifecycle hooks, like: 
		- ngOnInit() ...let's us add functionality when a component initializes or loads. 
		- others for when a componenet changes or is destroyed. 


Can use CLI to generate componenets

ng g component componenets/my-componenet

- creates the typescript file
- html file
- css file

- adds to @ngModule decorator located in the app.module.ts file


NgModule 

Going through app.module.ts:

THINK OF IT LIKE A REGISTRY FOR THE REST OF THE APPLICATION

- In addition to componenets we can have modules
- every angular app has this AppModule and it uses the @NgModule decorator
- BrowserModule - takes care of displaying app in browser
- importing NGModule itself to use decorator


CREATING COMPONENTS

- ng serve 

app.component.ts file

1. create new folder - componenets
2. create new file for componenet - sandbox.componenet.ts
3. create the componenet, export the class (using pascal case, and match file name but file name uses dashes for multiple words)


Data Binding, Properties & String Interpolation

SandboxComponenet - Data Binding
    - created property called name (directly in the class)
    - can bind the property data to the template {{ }}
    - dynamically bind data to our template
    - {{ }} --> string interpolation (as one way to bind data)
    - property values can be objects as well as by functions


constructor: function that runs when an object is instantiated from the class or component is initialized

properties - we have access to these and all methods in the class, including constructor.

So could take a property like age and reference it like this.age.

Component class is nothing more than properties and methods

<ul>

    <li> {{ 'Hello World' }} </li>
    <li> {{ 1 + 1 }} </li>
    <li> {{ showAge() }} </li>

</ul>

COMPONENET = 
1. class with properties and method + 2. template



ADDING TYPES TO PROPERTIES

export class SandboxComponenet {
	name:string = 'John Doe';
}

*** Protects your application from errors


OBJECTS & INTERFACES
- using them as properties

customer: {id:number, name:string, email:string}

or create an interface:

interface Customer {
	id:number,
	name:string,
	email:string
}

can also save interface as a separate file ... 
in Components, save a new file customer.ts, export and import

Interfaces help model out your data.


*** Notes on Interfaces in TypeScript: 

Example of an interface: 

function printLabel(labelledObj: { label: string }) {
    console.log(labelledObj.label);
}

let myObj = {size: 10, label: "Size 10 Object"};
printLabel(myObj);

	- type-checker: checks call to printLabel
	- printLabel's parameter requires the obj passed has at least 1 property called label of type string

Using an interface to acheive that result: 

interface LabelledValue {
    label: string;
}

function printLabel(labelledObj: LabelledValue) {
    console.log(labelledObj.label);
}

let myObj = {size: 10, label: "Size 10 Object"};
printLabel(myObj);

	- the interface LabelledValue is a name we can now use to describe the requirement. 
	- only the 'shape' that matters
	- type checker does not require that the properties come in any sort of order, only that the required props are present and have required type. 


TEMPLATE SYNTAX
- binding properties
- if statements
- looping







